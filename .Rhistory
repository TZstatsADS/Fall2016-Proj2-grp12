year.vec<-dimnames(M)
M<-tapply(Cpiu$V4,Cpiu$V2,mean)
plot(M)
plot(,xlab=dimnames(M))
plot(M,xlab=dimnames(M))
)cpi.vec<-M[1:104]
year.vec<-t(dimnames(M))
plot(cpi.vec~year.vec)
year.vec<-t(dimnames(M))
cpi.vec<-M[1:104]
plot(cpi.vec~year.vec)
year.vec<-c(dimnames(M),nrows=104)
year.vec
year.vec<-Matrix(dimnames(M),nrows=104)
year.vec<-matrix(dimnames(M),nrows=104)
?matrix
year.vec<-matrix(dimnames(M),nrow=104)
year.vec
dimnames(M)
year.vec<-matrix(data=dimnames(M),nrow=104,ncol=1)
year.vec
M<-apply(Cpiu$V4,Cpiu$V2,mean)
M<-sapply(Cpiu$V4,Cpiu$V2,mean)
?apply
M<-tapply(Cpiu$V4,Cpiu$V2,mean)
M
Plot(M)
plot(M)
?plot
plot(M)
plot(dimnames(M),M)
plot(dimnames(M),M[1:104])
dimnames(M)
M<-tapply(Cpiu$V4,Cpiu$V2,mean)
M
year.vec<-dimnames(M)
str(year.vec)
as.numeric(year.vec)
year.vec<-Cpiu$V2
cpi.vec<-M
plot(cpi.vec~year.vec)
class<-year.vec
sort(Cpiu$V2)
table(Cpiu$V2)
mean(table(Cpiu$V2)$$V4)
mean(table(Cpiu$V2)$V4)
mean(table(Cpiu$V2))
M<-tapply(Cpiu$V4,Cpiu$V2,mean)
plot(M)
?plot
plot(M)
source('~/.active-rstudio-document', echo=TRUE)
plot(M,xlab="years",ylab="cpi")
plot(M~M$char,xlab="years",ylab="cpi")
plot(M~M$char,xlab="years",ylab="cpi")
str(M)
plot(M~M$char[1:104],xlab="years",ylab="cpi")
plot(M,xlab="years",ylab="cpi")
?data.frame
plot(M[1:104]~char[1:104],xlab="years",ylab="cpi")
plot(M[1:104]~M$char[1:104],xlab="years",ylab="cpi")
as.numeric(M$char)
as.numeric(M)
table(Cpiu$V2)
sort(Cpiu$V2)
sort(unique(Cpiu$V2))
year.vec<-sort(unique(Cpiu$V2))
plot(M[1:104]~year.vec,xlab="years",ylab="cpi")
M<-tapply(Cpiu$V4,Cpiu$V2,mean)
year.vec<-sort(unique(Cpiu$V2))
cpi.vec<-M[1:104]
plot(cpi.vec~year.vec,xlab="years",ylab="cpi")
typeof(CPIU)
dim(CPIU)
cpiu<-CPIU[4:1407,]
head(cpiu)
year.vec<-sort(unique(Cpiu$V2))
typeof(CPIU)
typeof(cpiu)
is.na(cpiu$V4)==FALSE
Cpiu<-cpiu[is.na(cpiu$V4)==FALSE,]
Cpiu
?colnames
CPIU<-read.csv("C:/Users/Mengya/Desktop/Columbia Desk/GR5205/5205 Homeworks/5203HW3/cpiu-long.csv",header=FALSE,col.names =c("date","year","month","CPI") )
CPIU<-read.csv("C:/Users/Mengya/Desktop/Columbia Desk/GR5205/5205 Homeworks/5203HW3/cpiu-long.csv",header=FALSE )
CPIU<-read.csv("C:/Users/Mengya/Desktop/Columbia Desk/GR5205/5205 Homeworks/5205HW3/cpiu-long.csv",header=FALSE )
dim(CPIU)
head(CPIU)
CPIU<-read.csv("C:/Users/Mengya/Desktop/Columbia Desk/GR5205/5205 Homeworks/5205HW3/cpiu-long.csv",header=FALSE,col.names =c("date","year","month","CPI"))
head(CPIU)
cpiu<-CPIU[4:1407,]
head(cpiu)
CPIU<-read.csv("C:/Users/Mengya/Desktop/Columbia Desk/GR5205/5205 Homeworks/5205HW3/cpiu-long.csv",header=FALSE,col.names =c("date","year","month","CPI"))
head(CPIU)
dim(CPIU)
cpiu<-CPIU[4:1407,]
head(cpiu)
cpiu<-CPIU[4:1407,]
head(cpiu)
typeof(cpiu)
Cpiu<-cpiu[is.na(cpiu$CPI)==FALSE,]
year.month.vec<-Cpiu$year
cpi.vec.ym.<-Cpiu$CPI
length(year.month.vec)
length(cpi.vec.ym.)
plot(cpi.vec.ym.~year.month.vec,data = Cpiu)
plot(cpi.vec.ym.~year.month.vec,data = Cpiu,main="CPI vs. Years")
M<-tapply(Cpiu$CPI,Cpiu$year,mean)#average CPI for each year
M
year.vec<-sort(unique(Cpiu$V2))
year.vec<-sort(unique(Cpiu$year))
year.vec
cpi.vec<-M[1:104]
plot(cpi.vec~year.vec,xlab="years",ylab="cpi")
typeof(M)
str(M)
plot(cpi.vec~year.vec,xlab="years",ylab="cpi",main="Average CPI for each year")
plot(cpi.vec~year.vec,xlab="years",ylab="cpi",main="Average CPI for each year")
#(g)
??image
read.jpg("C:/Users/Mengya/Desktop/Columbia Desk/GR5205/5205 Homeworks/5205HW3/CPI by decades.jpg")
casablanca_pic<-read.pnm("C:/Users/Mengya/Desktop/Columbia Desk/GR5206/casablanca.pgm")
#Install Packages
install.packages("pixmap")
library("pixmap")
library(pixmap)
casablanca_pic<-read.pnm("C:/Users/Mengya/Desktop/Columbia Desk/GR5206/casablanca.pgm")
?jpg
??jpg
??pic
package(jpeg)
install.packages(jpeg)
package(jpeg)
install.packages("jpeg")
install.packages("jpeg")
package(jpeg)
library(jpeg)
install.packages("ReadImages")
library(ReadImages)
readJPEG("C:/Users/Mengya/Desktop/Columbia Desk/GR5205/5205 Homeworks/5205HW3/CPI by decades.jpg")
readJPEG("C:/Users/Mengya/Desktop/Columbia Desk/GR5205/5205 Homeworks/5205HW3/CIP by decades.JPEG",native=FALSE)
install.packages("ReadImages")
library(ReadImages)
readJPEG("C:/Users/Mengya/Desktop/Columbia Desk/GR5205/5205 Homeworks/5205HW3/CIP by decades.JPEG",native=FALSE)
install.packages("jpeg")
install.packages("jpeg")
library(jpeg)
readJPEG("C:/Users/Mengya/Desktop/Columbia Desk/GR5205/5205 Homeworks/5205HW3/CIP by decades.JPEG",native=FALSE)
year.vec
plot(cpi.vec[1:30]~year.vec[1:30],xlab="years",ylab="cpi",main="Average CPI for each year")
plot(cpi.vec[1:30]~year.vec[1:30],xlab="years",ylab="cpi",main="Average CPI for each year",lines=TRUE)
plot(cpi.vec[1:30]~year.vec[1:30],xlab="years",ylab="cpi",main="Average CPI for each year",smoother=TRUE)
?plot
plot(cpi.vec[1:30]~year.vec[1:30],xlab="years",ylab="cpi",main="Average CPI by years during the great depression")#zoom into year from 1915 to 1940
plot(cpi.vec[1:30]~year.vec[1:30],xlab="years",ylab="cpi",main="Annual average CPI during the great depression")#zoom into year from 1915 to 1940
which(year.vec=2009)
which(year.vec==2009)
which(year.vec==2009);dim(year.vec)
which(year.vec==2009);length(year.vec)
which(year.vec==2009)
plot(cpi.vec[90:n]~year.vec[90:n],xlab="years",ylab="cpi",main="Annual average CPI during the great depression")#zoom into year from 1915 to 1940
which(year.vec==2009);length(year.vec)
plot(cpi.vec[90:n]~year.vec[90:n],xlab="years",ylab="cpi",main="Annual average CPI during the great recession in 2009")#zoom into year from 1915 to 1940
which(year.vec==2009)
plot(cpi.vec[90:n]~year.vec[90:n],xlab="years",ylab="cpi",main="Annual average CPI during the great recession in 2009")#zoom into year from 1915 to 1940
year.vec[97]-year.vec[96]
cpi.vec[97]-cpi.vec[96]
cpi.vec[97]
cpi.vec[96]
cpi.vec[97]-cpi.vec[96]
which(year.vec==1040)
which(year.vec==1940)
plot(cpi.vec~year.vec,xlab="years",ylab="cpi",main="Average CPI for each year")
length((cpi,vec))
length(cpi,vec)
CPIU<-read.csv("C:/Users/Mengya/Desktop/Columbia Desk/GR5205/5205 Homeworks/5205HW3/cpiu-long.csv",header=FALSE,col.names =c("date","year","month","CPI"))
dim(CPIU)
cpiu<-CPIU[4:1407,]
head(cpiu)
typeof(cpiu)
```
So the type of the data is a list.
#(b)
```{r}
Cpiu<-cpiu[is.na(cpiu$CPI)==FALSE,]
year.month.vec<-Cpiu$year
cpi.vec.ym.<-Cpiu$CPI
length(year.month.vec)
length(cpi.vec.ym.)
```
Both vectors are $1244 x 1$ vectors.
#(c)
```{r}
plot(cpi.vec.ym.~year.month.vec,data = Cpiu,main="CPI vs. Years")
```
There are multiple points for each year because there are multiple data for different months in each year.
```{r}
M<-tapply(Cpiu$CPI,Cpiu$year,mean)#average CPI for each year
year.vec<-sort(unique(Cpiu$year))
cpi.vec<-M[1:104]
plot(cpi.vec~year.vec,xlab="years",ylab="cpi",main="Average CPI for each year")
```
#(d)
```{r}
```
#(e)Suppose that the salary of a person is 100K per year. Given your model, what is the minimum amount of raise he/she should expect after 1 year of working for the company? How about after 10 years.
```{r}
```
length(cpi,vec)
which(year.vec==2009)
plot(cpi.vec[90:n]~year.vec[90:n],xlab="years",ylab="cpi",main="Annual average CPI during the great recession in 2009")#zoom into year from 2002 to 2016
cpi.vec[97]-cpi.vec[96]
plot(cpi.vec~year.vec,xlab="years",ylab="cpi",main="Average CPI for each year")
plot(log(cpi.vec)~year.vec,xlab="years",ylab="cpi",main="Average CPI for each year")
plot(log(cpi.vec)~log(year.vec),xlab="years",ylab="cpi",main="Average log(CPI) for each year")
plot(log(cpi.vec)~year.vec,xlab="years",ylab="cpi",main="Average log(CPI) for each year")
plot(sqrt(cpi.vec)~year.vec,xlab="years",ylab="cpi",main="Average sqrt(CPI) for each year")
lm1<-lm(log(cpi.vec)~year.vec)
summary(lm1)
coef(lm1)
3.311e-02
plot(lm1,xlab="years",ylab="cpi",main="Average log(CPI) for each year")
lm1<-lm(log(cpi.vec)~year.vec)
plot(lm1,xlab="years",ylab="cpi",main="Average log(CPI) for each year")
?plot
abline(lm1)
plot(lm1,xlab="years",ylab="cpi",main="Average log(CPI) for each year")
plot(og(cpi.vec)~year.vec,xlab="years",ylab="cpi",main="Average log(CPI) for each year")
plot(og(cpi.vec)~year.vec,xlab="years",ylab="cpi",main="Average log(CPI) for each year")
plot(log(cpi.vec)~year.vec,xlab="years",ylab="cpi",main="Average log(CPI) for each year")
lm1<-lm(log(cpi.vec)~year.vec)
coef(lm1)
abline(lm1)
e^coef[2]
e
In1
2+3
2^2
*e*^coef[2]
$e*^coef[2]$
exp*^coef[2]
exp{coef[2]}
exp(coef[2])
?exp()
coef[,2]
exp(coef(lm1)[2])
coef(lm1)[2]
coef(lm1) #coefficients
coef(lm1)
coef(lm1)[2]
exp(coef(lm1)[2])
exp(0.033)
length(cpi.vec)
plot(cpi.vec[90:104]~year.vec[90:104],xlab="years",ylab="cpi",main="Annual average CPI during the great recession in 2009")#zoom into year from 2002 to 2016
cpi.vec[97]-cpi.vec[96]
exp(coef(lm1)[2])
lm2<-lm(sqrt(cpi.vec)~year.vec) #model
plot(sqrt(cpi.vec)~year.vec,xlab="years",ylab="cpi",main="Average sqrt(CPI) for each year")
lm2<-lm(sqrt(cpi.vec)~year.vec) #model
coef(lm2) #coefficients
abline(lm2) #fit lm1
exp(coef(lm2)[2])
(coef(lm2)[2])^2
coef(lm2) #coefficients
plot(sqrt(cpi.vec)~year.vec,xlab="years",ylab="cpi",main="Average sqrt(CPI) for each year")
plot(log(cpi.vec)~year.vec,xlab="years",ylab="cpi",main="Average log(CPI) for each year")
lm1<-lm(log(cpi.vec)~year.vec) #model
coef(lm1) #coefficients
abline(lm1) #fit lm1
exp(coef(lm1)[2])
plot(sqrt(cpi.vec)~year.vec,xlab="years",ylab="cpi",main="Average sqrt(CPI) for each year")
lm2<-lm(sqrt(cpi.vec)~year.vec) #model
coef(lm2) #coefficients
abline(lm2) #fit lm1
(coef(lm2)[2])^2
abline(lm2) #fit lm1
(coef(lm2)[2])^2
plot(sqrt(cpi.vec)~year.vec,xlab="years",ylab="cpi",main="Average sqrt(CPI) for each year")
lm2<-lm(sqrt(cpi.vec)~year.vec) #model
coef(lm2) #coefficients
abline(lm2) #fit lm1
(coef(lm2)[2])^2
abline(lm2) #fit lm1
(coef(lm2)[2])^2
abline(lm2) #fit lm1
(coef(lm2)[2])^2
log(10)
exp(2.3)
100*exp(0.03310565)
100*((exp(0.03310565))^10)
exp(0.03310565)
100*exp(0.03310565)-100
100*((exp(0.03310565))^10)-100
plot(log(cpi.vec)~year.vec,xlab="years",ylab="cpi",main="Average log(CPI) for each year")
abline(lm1) #fit lm1
plot(sqrt(cpi.vec)~year.vec,xlab="years",ylab="cpi",main="Average sqrt(CPI) for each year")
abline(lm2) #fit lm2
which(year.vec==1940)
length(year.vec==1940)
cpi.vec[28]
year.vec[28:104]
(cpi.vec)[28:104
]
lm3<-lm(log((cpi.vec)[28:104])~year.vec[28:104]) #model
plot(lm3)
plot(log((cpi.vec)[28:104])~year.vec[28:104])
abline(lm3)
summary(lm3)
exp(0.040002)
100*exp(0.040002)
100*exp(0.040002)-100
exp(0.040002)
head(nets1617)
nets1617<-readLines("http://www.espn.com/nba/teams/printSchedule?team=bkn&season=2017")
head(nets1617)
nets1617<-readLines("https://cluster33-files.instructure.com/courses/1396~11833/files/1396~667231/course%20files/Homeworks/NetsSchedule.html?download=1&inline=1&sf_verifier=79352ea1305bf2681fdab0b864c3d18b&ts=1475786063&user_id=13960000000282169")
head(nets1617)
nets1617<-readLines("https://cluster33-files.instructure.com/courses/1396~11833/files/1396~667231/course%20files/Homeworks/NetsSchedule.html?download=1&inline=1&sf_verifier=79352ea1305bf2681fdab0b864c3d18b&ts=1475786063&user_id=13960000000282169")
head(nets1617)
nets1617[6:10]
nets1617[11:20]
nets1617[2:300]
nets1617[20:30]
dim(nets1617)
nrow(nets1617)
nrow(nets1617)
length(nets1617)
mode(nets1617)
?lines
nchar(nets1617)
length(nets1617)
sum(nchar(nets1617))
max(nchar(nets1617))
which(nchar(nets1617)==max(nchar(nets1617)) )
nets[475]
nets1617[475,]
nets1617[475]
nchar(nets1617[475])
max(nchar(nets1617)
]
max(nchar(nets1617))
which(nchar(nets1617)==max(nchar(nets1617)))
nchar(nets1617[475])
max(nchar(nets1617)
)
nets1617<-readLines("http://www.espn.com/nba/teams/printSchedule?team=bkn&season=2017")
mode(nets1617)
nets1617<-readLines("http://www.espn.com/nba/teams/printSchedule?team=bkn&season=2017")
mode(nets1617)
mode(nets1617)
nets1617<-readLines("http://www.espn.com/nba/teams/printSchedule?team=bkn&season=2017")
nets1617<-readLines('http://www.espn.com/nba/teams/printSchedule?team=bkn&season=2017')
?readLines
nets1617<-readLines("https://cluster33-files.instructure.com/courses/1396~11833/files/1396~667231/course%20files/Homeworks/NetsSchedule.html?download=1&inline=1&sf_verifier=2ff068216f65bfd5e49db4b6429c5d01&ts=1475788428&user_id=13960000000282169")
mode(nets1617)
length(nets1617)#number of strings in file
sum(nchar(nets1617))#
which(nchar(nets1617)==max(nchar(nets1617)))
nchar(nets1617[475])
maxC<-which(nchar(nets1617)==max(nchar(nets1617)))
nchar(nets1617[maxC])
nets1617<-readLines("C:/Users/Mengya/Desktop/Columbia Desk/GR5206/5206Homework/HW2/NetsSchedule.html")
nets1617<-readLines("C:/Users/Mengya/Desktop/Columbia Desk/GR5206/5206Homework/HW3/NetsSchedule.html")
mode(nets1617)
length(nets1617)#number of strings in file
sum(nchar(nets1617))#
maxC<-which(nchar(nets1617)==max(nchar(nets1617)))
nchar(nets1617[maxC])
length(nets1617)#number of strings in file
which(nets1617=="Apr 12")
which(nets1617[]=="Apr 12")
which(nchar(nets1617)==max(nchar(nets1617)))
nets1617=="Apr 12"
?grep
grep("Apr 12",nets1617)
grep("Oct 26",nets1617)
grep("Oct 26",nets1617)
date_exp<-"[A-Z][a-z]{2},\\s[A-Z][a-z]{2}\\s[0:9]+"
grep(date_exp,nets1617)
gregexpr(date_exp,nets1617)
regmatches(nets1617,gregexpr(date_exp,nets1617))
regmatches(nets1617,gregexpr(date_exp,nets1617[315:396]))
regmatches(nets1617[315:396],gregexpr(date_exp,nets1617[315:396]))
date_exp<-"[A-Z][a-z]{2},\\s[A-Z][a-z]{2}\\s[0-9]+"
regmatches(nets1617[315:396],gregexpr(date_exp,nets1617[315:396]))
```
grep(date_exp,nets1617)
length(grep(date_exp,nets1617))
regmatches(nets1617[315:396],gregexpr(date_exp,nets1617[315:396]))
regmatches(nets1617,gregexpr(date_exp,nets1617))
length(grep(date_exp,nets1617))
length(date)
date<-grep(date_exp,nets1617)
length(date)
date_exp<-"[A-Z][a-z]{2},\\s[A-Z][a-z]{2}\\s[0-9]+"
gamedate<-grep(date_exp,nets1617)
length(gamedate)
gamedate
gamedate[1];gamedate[82]
3.311exp(-2)
3.311*exp(-2)
summary(lm1)
3.311*exp(-02)
3.311*exp(-2)
3.311/exp(2)
exp(0.4480951)
coef(lm1)
coef(lm1)[2]
summary(lm1)
3.311e-02
exp(3.311e-02)
summary(lm3)
preliminary.data.job <- FALSE
preliminary.data.job <- FALSE
relevant.columns <- c('CAMIS','DBA','CUISINE.DESCRIPTION','full.address')
if(preliminary.data.job){
restaurant.data <- read_csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv") #load your data set here
names(restaurant.data) <- make.names(names(restaurant.data))
restaurant.data$full.address <- paste(tolower(restaurant.data$STREET),
restaurant.data$BUILDING,", NY, US")
restaurant.data.uniques <- restaurant.data[!duplicated(restaurant.data[,relevant.columns]),]
restaurant.data.uniques <- restaurant.data.uniques[,relevant.columns]
write_csv(restaurant.data.uniques, '../output/restaurant_uniques_source.csv')
} else {
restaurant.data.uniques <- read_csv('../output/restaurant_uniques_source.csv')
}
preliminary.data.job <- FALSE
relevant.columns <- c('CAMIS','DBA','CUISINE.DESCRIPTION','full.address')
if(preliminary.data.job){
## ---- Extract Data
restaurant.data <- read.csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv") #load your data set here
## ---- Transform Data
names(restaurant.data) <- make.names(names(restaurant.data))
restaurant.data$full.address <- paste(tolower(restaurant.data$STREET),
restaurant.data$BUILDING,", NY, US")
## ---- Load Data
restaurant.data.uniques <- restaurant.data[!duplicated(restaurant.data[,relevant.columns]),]
restaurant.data.uniques <- restaurant.data.uniques[,relevant.columns]
## ---- Write CSV file with the table we need to geo locate
write_csv(restaurant.data.uniques, '../output/restaurant_uniques_source.csv')
} else {
restaurant.data.uniques <- read.csv('../output/restaurant_uniques_source.csv')
}
preliminary.data.job <- FALSE
relevant.columns <- c('CAMIS','DBA','CUISINE.DESCRIPTION','full.address')
if(preliminary.data.job){
## ---- Extract Data
restaurant.data <- read.csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv") #load your data set here
## ---- Transform Data
names(restaurant.data) <- make.names(names(restaurant.data))
restaurant.data$full.address <- paste(tolower(restaurant.data$STREET),
restaurant.data$BUILDING,", NY, US")
## ---- Load Data
restaurant.data.uniques <- restaurant.data[!duplicated(restaurant.data[,relevant.columns]),]
restaurant.data.uniques <- restaurant.data.uniques[,relevant.columns]
## ---- Write CSV file with the table we need to geo locate
write_csv(restaurant.data.uniques, '../output/restaurant_uniques_source.csv')
} else {
restaurant.data.uniques <- read.csv('../output/restaurant_uniques_source.csv')
}
?read_csv
preliminary.data.job <- FALSE
relevant.columns <- c('CAMIS','DBA','CUISINE.DESCRIPTION','full.address')
if(preliminary.data.job){
restaurant.data <- read.csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv") #load your data set here
names(restaurant.data) <- make.names(names(restaurant.data))
restaurant.data$full.address <- paste(tolower(restaurant.data$STREET),
restaurant.data$BUILDING,", NY, US")
restaurant.data.uniques <- restaurant.data[!duplicated(restaurant.data[,relevant.columns]),]
restaurant.data.uniques <- restaurant.data.uniques[,relevant.columns]
write_csv(restaurant.data.uniques, '../output/restaurant_uniques_source.csv')
} else {
restaurant.data.uniques <- read.csv('../output/restaurant_uniques_source.csv')
}
?write.csv()
if(preliminary.data.job){
## ---- Extract Data
restaurant.data <- read.csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv") #load your data set here
## ---- Transform Data
names(restaurant.data) <- make.names(names(restaurant.data))
restaurant.data$full.address <- paste(tolower(restaurant.data$STREET),
restaurant.data$BUILDING,", NY, US")
## ---- Load Data
restaurant.data.uniques <- restaurant.data[!duplicated(restaurant.data[,relevant.columns]),]
restaurant.data.uniques <- restaurant.data.uniques[,relevant.columns]
## ---- Write CSV file with the table we need to geo locate
write.csv(restaurant.data.uniques, '../output/restaurant_uniques_source.csv')
} else {
restaurant.data.uniques <- read.csv('../output/restaurant_uniques_source.csv')
}
restaurant.data <- read.csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv") #load your data set here
setwd("C:/Users/Mengya/Desktop/Columbia Desk/GR5243/Project2/Fall2016-Proj2-grp12") #put your own folder address here
restaurant.data <- read.csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv") #load your data set here
setwd("C:/Users/Mengya/Desktop/Columbia Desk/GR5243/Project2/Fall2016-Proj2-grp12") #put your own folder address here
restaurant.data <- read.csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv") #load your data set here
restaurant.data <- read.csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv") #load your data set here
restaurant.data <- read.csv("C:/Users/Mengya/Desktop/Columbia Desk/GR5243/Project2/Fall2016-Proj2-grp12/data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv") #load your data set here
restaurant.data <- read.csv("C:/Users/Mengya/Desktop/Columbia Desk/GR5243/Project2/Fall2016-Proj2-grp12/data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv") #load your data set here
head(restaurant.data)
preliminary.data.job <- FALSE
relevant.columns <- c('CAMIS','DBA','CUISINE.DESCRIPTION','full.address')
if(preliminary.data.job){
restaurant.data <- read.csv("C:/Users/Mengya/Desktop/Columbia Desk/GR5243/Project2/Fall2016-Proj2-grp12/data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv")
names(restaurant.data) <- make.names(names(restaurant.data))
restaurant.data$full.address <- paste(tolower(restaurant.data$STREET),
restaurant.data$BUILDING,", NY, US")
restaurant.data.uniques <- restaurant.data[!duplicated(restaurant.data[,relevant.columns]),]
restaurant.data.uniques <- restaurant.data.uniques[,relevant.columns]
write.csv(restaurant.data.uniques, '../output/restaurant_uniques_source.csv')
} else {
restaurant.data.uniques <- read.csv('../output/restaurant_uniques_source.csv')
}
